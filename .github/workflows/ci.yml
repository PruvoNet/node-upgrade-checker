name: CI

on:
  push:
    branches:
      - master
  release:
    types: [published]
  pull_request:
    branches:
      - '**'
  repository_dispatch:
    types: [retest]

env:
  PRIMARY_NODE_VERSION: 14.x
  PRIMARY_OS: ubuntu-latest
  FORCE_COLOR: true
  JEST_CI: true
  REGISTRY: https://registry.npmjs.org/

jobs:
  test:
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [10.x, 12.x, 14.x]

    steps:

      - name: Echo env variables
        run: |
          echo ref: ${{ github.event.client_payload.ref || github.ref }}
          echo sha: ${{ github.event.client_payload.sha || github.sha }}
          echo head ref: ${{ github.event.client_payload.head_ref || github.head_ref }}
          echo base ref: ${{ github.event.client_payload.base_ref || github.base_ref }}
          echo action: ${{ github.action }}
          echo event: ${{ github.event_name }}

      - uses: actions/checkout@v2
        name: Checkout
        with:
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: |
            .yarn/unplugged
            .yarn/build-state.yml
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - uses: actions/cache@v1
        id: jest-cache
        with:
          path: '.cache'
          key: ${{ runner.os }}-jest
          restore-keys: |
            ${{ runner.os }}-jest

      - name: Install dependencies and build
        if: "!(matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS)"
        run: |
          yarn install --immutable --immutable-cache
          yarn run check-clean-workspace-after-install

      - name: Install dependencies and build with checksum integrity check
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS
        run: |
          yarn install --immutable --immutable-cache --check-cache
          yarn run check-clean-workspace-after-install

      - name: Run linting
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS
        run: yarn run lint

#      - name: Snyk security check
#        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS
#        uses: snyk/actions/node@master
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Verify types
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS
        run: yarn run build

      - name: Run unit tests with coverage
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS
        run: yarn run cover

      - name: Publish code coverage report
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS
        uses: codecov/codecov-action@v1
        env:
          GITHUB_REF: ${{ github.event.client_payload.ref || github.ref }}
          GITHUB_SHA: ${{ github.event.client_payload.sha || github.sha }}
          GITHUB_HEAD_REF: ${{ github.event.client_payload.head_ref || github.head_ref }}
        with:
          yml: ./codecov.yml
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittest
          name: codecov
          fail_ci_if_error: true

      - name: Upload coverage reports artifact
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS
        uses: actions/upload-artifact@v1
        with:
          name: coverage
          path: coverage

      - name: Run unit tests
        if: "!(matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS)"
        run: yarn run test:unit

      - name: Run integration tests
        run: yarn run test:integ

      - name: Run e2e tests
        run: yarn run test:e2e

      - name: Run mutation tests
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS && github.ref == 'refs/heads/master' && github.event_name != 'release' && github.event.action != 'published'
        run: yarn run mutation-test
        env:
          STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}

      - name: Upload mutation reports artifact
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS && github.ref == 'refs/heads/master' && github.event_name != 'release' && github.event.action != 'published'
        uses: actions/upload-artifact@v1
        with:
          name: mutation
          path: reports/mutation

  publish_version:
    name: Publish
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow

      - name: Use Node.js ${{ env.PRIMARY_NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
          registry-url: ${{ env.REGISTRY }}

      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: |
            .yarn/unplugged
            .yarn/build-state.yml
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies and build
        run: |
          yarn install --immutable --immutable-cache
          yarn run check-clean-workspace-after-install
          yarn run build

      - name: Publish
        run: |
          yarn config set registry $REGISTRY
          yarn config set username $NPM_AUTH_USER
          yarn config set email $NPM_AUTH_EMAIL
          npm config set //registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN
          yarn publish --non-interactive --no-git-tag-version
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
